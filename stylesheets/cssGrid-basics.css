/*
--------------------------------------------------------------------------------
CORE STYLES
--------------------------------------------------------------------------------
*/

/* CSS Variables */
:root {
  --yellow: #ffc600;
  --black: #272727;
}

html {
  /* border-box box model allows us to add padding and border to our elements without increasing their size */
  box-sizing: border-box;
  /* A system font stack so things load nice and quick! */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: 900;
  font-size: 10px;
  color: var(--black);
  text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);
}

/*
We inherit box-sizing: border-box; from our <html> selector
Apparently this is a bit better than applying box-sizing: border-box; directly to the * selector
*/
*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  background-image: url("../images/topography.svg"),
    linear-gradient(110deg, #f93d66, #6d47d9);
  background-size: 340px, auto;
  min-height: calc(100vh - 100px);
  margin: 50px;
  /* background: white; */
  background-attachment: fixed;
  letter-spacing: -1px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0 0 5px 0;
}

/*
--------------------------------------------------------------------------------
CORE GRID
--------------------------------------------------------------------------------
*/

/* Each item in our grid will contain numbers */
.item, .itemz {
  /* We center the contents of these items. You can also do this with flexbox too! */
  display: grid;
  justify-content: center;
  align-items: center;
  border: 5px solid rgba(0, 0, 0, 0.03);
  border-radius: 3px;
  font-size: 35px;
  background-color: var(--yellow); /* best colour */
}

.item p, .itemz p {
  margin: 0 0 5px 0;
}

/*
--------------------------------------------------------------------------------
GRID 1
--------------------------------------------------------------------------------
*/

.container {
    display: grid;
    grid-template-columns: 200px 400px;
    /* grid-template-columns: 200px auto 100px; */ /* Auto stretches and fills area */
    /* grid-template-rows: 200px; */
    /* grid-auto-rows: 500px */ /* Implicit rows not defined (above in template-rows) use this value when created */
    grid-gap: 20px;
    margin-bottom: 50px;
    border: 10px solid red;
}

.container-2 {
    display: grid;
    grid-template-columns: 1fr 200px 1fr; /* fr auto fills the remaining space in the container width */
    /* grid-template-columns: 1fr 1fr 1fr; */ /* fr creates 3 equal fluid columns */
    /* grid-template-columns: repeat(4, 1fr); */ /* shorthand for creating 4 columns */
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
}

.container-3 {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
}
.item9 {
    background-color: green;
    grid-column: span 3;
    grid-row: span 2;
}
.item7 {
    background-color: green;
    grid-column: 2 / 4; /* specify start end */
    grid-row: 1 / 3;
}

.container-4 {
    display: grid;
    grid-template-columns: repeat(5, 1fr 2fr);
    grid-template-rows: repeat(10, 50px);
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
}

.item41 {
    background-color: pink;
    grid-column: 3 / 5;
}
.item42 {
    background-color: orange;
    grid-column: 5 / -1; /* -1 makes it go to the end */
}
.item45 {
    background-color: green;
    grid-column: span 2;
    grid-row: span 2;
}
.item48 {
    background-color: violet;
    grid-column: span 4 / -1; /* span 4 columns, end at the end of grid */
    grid-row: span 2;
}
.item415 {
    background-color: purple;
    grid-column: 1 / -1;
}

.container-5 {
    display: grid;
    grid-template-columns: repeat(auto-fill, 150px) ; /* wraps fixed width column items */
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
}
.container-6 {
    display: grid;
    grid-template-columns: repeat(auto-fill, 150px) ; /* wraps fixed width column items */
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
}
.item64 {
    grid-column: auto / -1; /* fixes element to right */
}

.container-7 {
    display: grid;
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* Make sit quite responsive */
}
.container-8 {
    display: grid;
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); /* Make sit quite responsive */
}

.container-9 {
    display: grid;
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
    grid-template-columns: 1fr 500px 1fr;
    grid-template-rows: 150px 150px 100px;
    grid-template-areas:
        "sidebar-1 content sidebar-2"
        "sidebar-1 content sidebar-2"
        "footer footer footer";
}
.footer { grid-area: footer; }
.sidebar-1 { grid-area: sidebar-1;}
.sidebar-2 { grid-area: sidebar-2;}
.content { grid-area: content;}

@media (max-width: 700px) {
    .container-9 {
        background-color: red;
        border: 10px solid yellow;
        grid-template-areas:
            "content"
            "sidebar-1"
            "sidebar-2"
            "footer";
        grid-template-columns: 1fr;
        grid-template-rows: auto;
    }

}

.container-10 {
    display: grid;
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
    grid-template-columns: repeat(10, 1fr);
    grid-auto-flow: dense;
}
.itemz:nth-child(4n) {
    background: cornflowerblue;
    grid-column: span 7;
}
.itemz:nth-child(6n) {
    background: tomato;
    grid-column: span 2;
}
.itemz:nth-child(9n) {
    background: plum;
    grid-column: span 4;
}
.itemz9 {
    background: greenyellow !important;
    grid-column-end: -1 !important;
}

.container-11 {
    display: grid;
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
    grid-template-columns: repeat(5, 100px);
    grid-template-rows: repeat(3, 100px);
    place-items: stretch stretch;
    justify-content: space-between;

    /*
    justify-* is the row axis
    align-* is the column axis
    */
}
.itemb {
    background: white;

}
.itemb5 {
    justify-self: center;
    align-self: center;
}

.container-12 {
    display: grid;
    grid-gap: 20px;
    border: 10px solid red;
    margin-bottom: 50px;
    grid-template-columns: repeat(10, 1fr);
}
.logo {
    grid-column: span 2;
    order: 2;
}
.nav {
    grid-column: span 8;
    order: 1;
}
.contentz {
    grid-column: 1 / -1;
    order: 3;

}
